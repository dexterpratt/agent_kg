"""FastMCP server implementation for the knowledge graph."""

import logging
import os
from datetime import datetime
from typing import Any, Dict

from fastapi import FastAPI, HTTPException
from fastmcp import MCPRouter
import json
from pydantic import BaseModel

from .postgres import PostgresDB
from .tool_definitions import TOOL_DEFINITIONS
import dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger("knowledge_graph_server")

# Load environment variables
dotenv.load_dotenv()

# Initialize FastAPI app
app = FastAPI(title="Knowledge Graph MCP Server")

# Initialize MCP router
mcp = MCPRouter()
app.include_router(mcp.router)

# Custom JSON encoder for datetime
class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        return json.JSONEncoder.default(self, obj)

# Initialize database connection
db = PostgresDB({
    "dbname": os.getenv("POSTGRES_DB", "memento"),
    "user": os.getenv("POSTGRES_USER", "postgres"),
    "password": os.getenv("POSTGRES_PASSWORD", ""),
    "host": os.getenv("POSTGRES_HOST", "localhost"),
    "port": os.getenv("POSTGRES_PORT", "5432"),
})

# Pydantic models for request validation
class AddEntityRequest(BaseModel):
    type: str
    name: str
    properties: Dict[str, Any] = {}

class UpdateEntityRequest(BaseModel):
    id: int
    properties: Dict[str, Any]

class DeleteEntityRequest(BaseModel):
    id: int

# Tool implementations
@mcp.tool("add_entity", "Add a new entity to the graph")
async def add_entity(request: AddEntityRequest) -> Dict[str, Any]:
    try:
        result = db.add_entity(
            entity_type=request.type,
            name=request.name,
            properties=request.properties
        )
        return json.loads(json.dumps(result, cls=CustomJSONEncoder))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@mcp.tool("update_entity", "Update an entity's properties")
async def update_entity(request: UpdateEntityRequest) -> Dict[str, Any]:
    try:
        result = db.update_entity(
            entity_id=request.id,
            properties=request.properties
        )
        return json.loads(json.dumps(result, cls=CustomJSONEncoder))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@mcp.tool("delete_entity", "Delete an entity")
async def delete_entity(request: DeleteEntityRequest) -> Dict[str, Any]:
    try:
        result = db.delete_entity(entity_id=request.id)
        return json.loads(json.dumps(result, cls=CustomJSONEncoder))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.on_event("shutdown")
async def shutdown_event():
    """Clean up server resources."""
    try:
        if db:
            db.close()
        logger.info("Server resources cleaned up successfully")
    except Exception as e:
        logger.error(f"Error during server cleanup: {e}")
        raise

# The server can be run using:
# uv run fastmcp install --with uvicorn agent_kg.server
