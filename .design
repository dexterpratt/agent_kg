## Development Policies
- Incremental development, verification of correct operation and usable prototype system after each development step
- Avoid premature optimization
- Avoid speculative addition of features not currently required.

## Software Architecture and Development Plan

The agent_kg system is structured as an MCP server that provides knowledge graph capabilities through a PostgreSQL database. 

Currently prototyping, supporting ongoing research in several projects, requirements are evolving

The architecture and development plan consists of several key components and steps:

1. Core Knowledge Graph Layer
   - Entities table as primary nodes
   - Relationships table for edges between entities
   - Properties system with both flexible and validated property storage
   - Property definitions for validation rules
   - Creation and last modification dates on entities and relationships
   - Tightly constrained and validated write operations for safety 
      - step 1
         - create entity
         - delete entity
         - add/update/delete entity properties
      - step 2
         - add relationship'
         - delete relationship
         - add/update/delete relationship properties
      - step 3: managing vocabularies. 
         - add relationship type
         - add entity type
         - add property type
         - protected entities and relationships (for example, only some episode properties and relationships can be changed by the agent)
      - step 4: special operations
         - add episode
   - Unconstrained read operations
      - step 1
         - simple "execute read query" MCP tool interface
      - includes introspection: list tables, describe tables
   - Future, design TBD
      - export and import/merging of knowledge graphs
      - backup (before major operations, such as import knowledge graph)

2. Agent Operations Layer
   - Procedures, steps, and components for defining agent operations
      - these are abstract "tools", dynamic prompt augmentation the agent can use
      - the agent is instructed to consult these as a guide to expected behavior in specific situations
      - includes query templates and result formats for standardized data access
   - Operation logging and state tracking within the knowledge graph
      - Episodes provide explicit history of each prompt/response/action process
      - Actions are planned, performed, and annotated
      - only selected properties of Actions are agent editable after the action is created

3. System Management Layer
   - Schema version control
   - System purpose documentation
   - Vocabulary management (see step 3 in knowledge graph operations)
   - Actions tracking

## Schema Overview

Core Knowledge Graph Tables:
- entities: Stores nodes with type and name
- relationships: Stores edges between entities with type
- properties: Flexible property storage for both entities and relationships
- property_definitions: Defines valid property keys and validation rules
- validated_properties: Properties that conform to defined rules

Agent Procedures:
- agent_procedures: Defines procedures/operations
- procedure_steps: Steps within procedures
- procedure_components: Technical implementation details for steps

Operation Tracking:
- operation_log: Logs operations and their status
- operation_states: Tracks state changes during operations

Query Management:
- query_templates: Reusable query patterns
- result_formats: Standardized output formats

System Tables:
- system_purpose: Documents system architecture and conventions
- schema_versions: Tracks database schema evolution
- schema_vocabulary: Maintains consistent terminology
- tasks: Tracks development and operational tasks

## Phase 1

- Get MCP server tools working, step by step (see steps above)

- Error Handling
   - Use standard error types with descriptive messages
   - MCP package does not provide specific error types
   - Operation logging captures errors and resolution steps

## Phase 2

- Data Validation
   - Two-tier property, relationship and entity system: flexible vs validated, see above protected property, relationship, and entity types
   - Property definitions enforce data consistency
   - Schema vocabulary ensures terminology consistency


## Future Considerations, should NOT affect the initial prototype design

- Security
   - Row-level security disabled
   - All operations logged for audit purposes
   - State tracking for operation verification

- Performance Considerations
   - Indexed key fields for efficient querying
   - Unique constraints on critical combinations
   - Timestamp tracking for all major entities

- Scalability
   - Monitor performance with growing data volume
   - Consider partitioning for large tables
   - Evaluate caching strategies

- Integration
   - Standardize API patterns for agent interaction
   - Define clear boundaries for system expansion
   - Maintain backward compatibility

- Maintenance
   - Regular schema version updates
   - Monitoring of operation logs
   - Performance optimization based on usage patterns
